module sort_system(
    input wire clk,
    input wire reset,
    input wire dataValid,
    input wire [3:0] wAddress,
    input wire [5:0] dataIn,
    output reg outValid,
    output wire [3:0] outAddress,
    output wire [5:0] dataOut
);

// Internal signals
reg write_enable = 0;
reg read_enable = 0;
reg [3:0] internal_address;
reg [5:0] internal_data;
wire [5:0] memory_data_out; // Output from memory
reg sorting_done = 0;
reg [3:0] read_counter = 0;
reg [3:0] data_count = 0;
reg [15:0] valid_address = 0;

reg [3:0] first_valid_index = 0;
reg [4:0] cState=0, nState=0;
reg [5:0] minval;
reg [3:0] minreg = 4'b0000;
reg flag = 0;



// Instantiate the memory module
memory_module mem (
    .clk(clk),
    .write_enable(write_enable),
    .read_enable(read_enable),
    .address(internal_address),
    .data_in(internal_data),
    .data_out(memory_data_out)
);

always @(posedge clk) 
begin
    if (reset) begin
        data_count <= 0;
        sorting_done <= 0;
        outValid<=0;
        read_counter <= 0;
        cState <= 0;
        nState <= 0;
        write_enable <= 0; // Ensure write_enable is low after reset
        minval <= 6'b111111;
        minreg <= 4'b0000;
    end
    else if (dataValid && !sorting_done) 
    begin
       // Enable writing when dataValid is high
        internal_address <= wAddress;
         write_enable <= 1; 
        internal_data <= dataIn;
        data_count <= data_count + 1;
        valid_address[wAddress] <= 1;
        minval <= 6'b111111;
  
    end 
    else if(data_count>0 && !dataValid && !sorting_done)
    begin
        read_enable =1;
        write_enable=0;
        cState = nState;
        
        case (cState)
            0:
            begin
                if(valid_address[0])
                begin
                    internal_address = 0;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 0;
                        minreg = 0;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 0;
                    end
                end
                nState = 1;
            end
            1:
            begin
                if(valid_address[1])
                begin
                
                    internal_address = 1;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 1;
                        minreg = 1;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 1;
                    end
                end
                nState = 2;
                
            end
            2:
            begin
                if(valid_address[2])
                begin
                    internal_address = 2;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 2;
                        minreg = 2;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 2;
                    end
                end
                nState = 3;
            end
            3:
            begin
                if(valid_address[3])
                begin
                    internal_address = 3;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 3;
                        minreg = 3;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 3;
                    end
                end
                nState = 4;
                
            end
            4:
            begin
                if(valid_address[4])
                begin
                    internal_address = 4;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 4;
                        minreg = 4;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 4;
                    end
                end
                nState = 5;
            end
            5:
            begin
                if(valid_address[5])
                begin
                    internal_address = 5;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 5;
                        minreg = 5;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 5;
                    end
                end
                nState = 6;
            end
            6:
            begin
                if(valid_address[6])
                begin
                    internal_address = 6;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 6;
                        minreg = 6;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 6;
                    end
                end
                nState = 7;
                
            end
            7:
            begin
                if(valid_address[7])
                begin
                    internal_address = 7;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 7;
                        minreg = 7;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 7;
                    end
                end
                nState = 8;
                
            end
            8:
            begin
                if(valid_address[8])
                begin
                    internal_address = 8;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 8;
                        minreg = 8;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 8;
                    end
                end
                nState = 9;
                
            end
            9:
            begin
                if(valid_address[9])
                begin
                    internal_address = 9;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 9;
                        minreg = 9;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 9;
                    end
                end
                nState = 10;
                
            end
            10:
            begin
                if(valid_address[10])
                begin
                    internal_address = 10;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 10;
                        minreg = 10;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 10;
                    end
                end
                nState = 11;
                
            end
            11:
            begin
                if(valid_address[11])
                begin
                    internal_address = 11;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 11;
                        minreg = 11;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 11;
                    end
                end
                nState = 12;
                
            end
            
            12:
            begin
                if(valid_address[12])
                begin
                    internal_address = 12;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 12;
                        minreg = 12;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 12;
                    end
                end
                nState = 13;
                
            end
            13:
            begin
                if(valid_address[13])
                begin
                    internal_address = 13;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 13;
                        minreg = 13;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 13;
                    end
                end
                nState = 14;
                
            end
            14:
            begin
                if(valid_address[14])
                begin
                    internal_address = 14;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 14;
                        minreg = 14;
                        minval = memory_data_out;
                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 14;
                    end
                end
                nState = 15;
                
            end
            15:
            begin
                if(valid_address[15])
                begin
                    internal_address = 15;
                    if(!flag)
                    begin
                        flag = 1;
                        first_valid_index = 15;
                        minreg = 15;
                        minval = memory_data_out;

                    end
                    if(minval > memory_data_out)
                    begin
                        minval = memory_data_out;
                        minreg = 15;
                    end
                end

//                read_enable = 1;
//                  internal_address = first_valid_index;
//                internal_data = memory_data_out;
//                read_enable = 0;
//                internal_address = minreg; 
//                write_enable = 1;

//                write_enable = 0;
//                internal_data = minval;
//                internal_address = first_valid_index;
//                write_enable = 1;
                flag = 0;
//                if(first_valid_index == 15 || flag == 0) 
//                begin
//                    outValid = 1;
//                    nState = 0;
//                    sorting_done = 1; 
//                end
//                else nState = first_valid_index+1;
                nState = (first_valid_index+1)%16;
                minval = 6'b111111;
                minreg = 4'b0000;
            end   

        endcase
         $monitor ("time: %d:: fvi: %b, minval: %b, minreg: %b validadd: %b, cState: %b, mdo: %d, internal address: %b", $time, first_valid_index, minval, minreg, valid_address, cState, memory_data_out, internal_address);
               
       
    end 
    else  if (sorting_done && read_counter <= 15) begin
            if(valid_address[read_counter])
            begin
                read_enable <= 1;
                outValid<=1;
                internal_address <= read_counter; // Sequentially read out sorted data
            end
            read_counter <= read_counter + 1;
       end else begin
           read_enable <= 0;
       end
end



assign dataOut = memory_data_out;
assign outAddress = internal_address;

endmodule

module memory_module(
    input wire clk,
    input wire write_enable,
    input wire read_enable,
    input wire [3:0] address,
    input wire [5:0] data_in,
    output reg [5:0] data_out
);

// Define the memory storage
reg [5:0] memory_storage [0:15]; // 16 locations, each 6 bits wide

always @(posedge clk or read_enable or write_enable or address) begin
    if (write_enable) begin
        // Write data to memory
        memory_storage[address] <= data_in;
    end
    if (read_enable) begin
        // Read data from memory
        data_out <= memory_storage[address];
    end
end

endmodule